library(readxl)
library(writexl)
library(lubridate)
library(dplyr)
library(stringr)
library(stringi)
write_xlsx(
list(
comercial = comercial,
df_vencidas_1e2e3 = df_vencidas_1e2e3,
df_recebidas_1e2e3 = df_recebidas_1e2e3
),
path = "C:/Users/pedro/OneDrive/Área de Trabalho/Projeto CreditScore/relatorio_credit_score.xlsx"
)
View(comercial)
View(df_recebidas)
View(comercial)
for (i in 1:3) {
parcela_str <- paste0("PARCELA ", i)
comercial[[paste0("Parcela ", i)]] <- case_when(
comercial$Nome %in% nomes_vencidas ~ "VENCIDA",
comercial$Nome %in% nomes_recebidas ~ "RECEBIDA",
TRUE ~ "NÃO ENCONTRADA"
)
}
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
clientes_expandidos$FinancialInfo
clientes_expandidos <- clientes_expandidos %>% select(-FinancialInfo)
View(clientes_expandidos)
colnames(clientes_expandidos)
clientes_expandidos <- clientes_expandidos %>% select(-FinancialInfo, -accounting_analysis)
clientes_expandidos <- clientes_expandidos %>% select(-ClientAddress_id, ClientAddress_country, ClientAddress_clientId, FinancingInfo_caseId, FinancingInfo_clientId -accounting_analysis)
clientes_expandidos <- clientes_expandidos %>% select(-ClientAddress_id, -ClientAddress_country, -ClientAddress_clientId, -FinancingInfo_caseId, -FinancingInfo_clientId, -accounting_analysis)
colnames(clientes_expandidos)
clientes_expandidos <- clientes_expandidos %>% select(-ClientAddress_id, -ClientAddress_country, -ClientAddress_clientId, -FinancingInfo_caseId, -FinancingInfo_clientId, -accounting_analysis,
-GovInfo, -CreditCardInfo_caseId, -CreditCardInfo_id, -LoanInfo_id, -FinancingInfo_id, -CreditCardInfo_clientId)
clientes_expandidos <- clientes_expandidos %>% select(-ClientAddress_country, -ClientAddress_clientId, -FinancingInfo_caseId, -FinancingInfo_clientId, -accounting_analysis,
-GovInfo, -CreditCardInfo_caseId, -CreditCardInfo_id, -LoanInfo_id, -FinancingInfo_id, -CreditCardInfo_clientId)
clientes_expandidos <- clientes_expandidos %>% select(-ClientAddress_clientId, -FinancingInfo_caseId, -FinancingInfo_clientId, -accounting_analysis,
-GovInfo, -CreditCardInfo_caseId, -CreditCardInfo_id, -LoanInfo_id, -FinancingInfo_id, -CreditCardInfo_clientId)
clientes_expandidos <- clientes_expandidos %>% select(-FinancingInfo_caseId, -FinancingInfo_clientId, -accounting_analysis,
-GovInfo, -CreditCardInfo_caseId, -CreditCardInfo_id, -LoanInfo_id, -FinancingInfo_id, -CreditCardInfo_clientId)
clientes_expandidos <- clientes_expandidos %>% select(
-GovInfo, -CreditCardInfo_caseId, -CreditCardInfo_id, -LoanInfo_id, -FinancingInfo_id, -CreditCardInfo_clientId)
colnames(clientes_expandidos)
clientes_expandidos <- clientes_expandidos %>% select(LoanInfo_clientId, LoanInfo_caseId, Case_clientId,
)
colnames(clientes_expandidos)
# Função para desaninhar colunas específicas com feedback
unnest_specific_columns <- function(df, columns_to_unnest) {
for (col in columns_to_unnest) {
if (col %in% names(df)) {
if (is.list(df[[col]])) {
cat("Desaninhando coluna:", col, "\n")
df <- df %>%
unnest_wider(all_of(col), names_sep = "_")
} else {
cat("Coluna", col, "não é uma lista\n")
}
} else {
cat("Coluna", col, "não encontrada no dataframe\n")
}
}
return(df)
}
# Aplica o desaninhamento nas colunas específicas
clientes_expandidos <- unnest_specific_columns(clientes, colunas_para_desaninhar)
# Visualiza as novas colunas criadas
cat("\n=== COLUNAS CRIADAS APÓS DESANINHAMENTO ===\n")
nova_colunas <- names(clientes_expandidos)[!names(clientes_expandidos) %in% names(clientes)]
print(nova_colunas)
# Mostra detalhes de cada grupo de colunas
cat("\n=== DETALHES DAS COLUNAS DESANINHADAS ===\n")
for (col_base in colunas_para_desaninhar) {
colunas_relacionadas <- names(clientes_expandidos)[grepl(paste0("^", col_base, "_"), names(clientes_expandidos))]
if (length(colunas_relacionadas) > 0) {
cat("\n", col_base, "->", length(colunas_relacionadas), "colunas:\n")
print(colunas_relacionadas)
}
}
# Visualiza a estrutura dos dados
cat("\n=== ESTRUTURA DO DATAFRAME ===\n")
glimpse(clientes_expandidos)
# Mostra uma amostra dos dados desaninhados
cat("\n=== AMOSTRA DOS DADOS DESANINHADOS ===\n")
clientes_expandidos %>%
select(contains("Case_") | contains("ClientAddress_") |
contains("FinancingInfo_") | contains("LoanInfo_") |
contains("CreditCardInfo_")) %>%
head(3) %>%
as.data.frame() %>%
print()
######################
clientes_expandidos <- clientes_expandidos %>% select(-ClientAddress_id, -ClientAddress_country, -ClientAddress_clientId, -FinancingInfo_caseId, -FinancingInfo_clientId, -accounting_analysis,
-GovInfo, -CreditCardInfo_caseId, -CreditCardInfo_id, -LoanInfo_id, -FinancingInfo_id, -LoanInfo_clientId, -LoanInfo_caseId, -Case_clientId)
colnames(clientes_expandidos)
clientes_expandidos <- clientes_expandidos %>% select(-profile_pic, -Case_UpdateLog, -CreditCardInfo_clientId)
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
library(dplyr)
library(purrr)
library(jsonlite)
# Função recursiva segura para colapsar listas e vetores
recursive_collapse <- function(x) {
if (is.null(x) || length(x) == 0) return("")       # NULL ou lista vazia vira ""
if (is.list(x)) x <- map_chr(x, recursive_collapse) # listas internas viram string
paste(unlist(x), collapse = " | ")                  # concatena tudo
}
# Aplica a função segura em todas as colunas listadas
clientes_flat <- clientes_expandidos %>%
mutate(across(where(is.list), ~ map_chr(., recursive_collapse)))
clientes_expandidos <- clientes_expandidos %>% select(-FinancialInfo)
saveRDS("C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS("C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS("C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS("C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS("C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
saveRDS(clientes_expandidos, "C:/Users/pedro/OneDrive/Área de Trabalho/tabelacompleta.rds")
library(dplyr)
library(purrr)
library(jsonlite)
# Função recursiva segura para colapsar listas e vetores
recursive_collapse <- function(x) {
if (is.null(x) || length(x) == 0) return("")       # NULL ou lista vazia vira ""
if (is.list(x)) x <- map_chr(x, recursive_collapse) # listas internas viram string
paste(unlist(x), collapse = " | ")                  # concatena tudo
}
# Aplica a função segura em todas as colunas listadas
clientes_flat <- clientes_expandidos %>%
mutate(across(where(is.list), ~ map_chr(., recursive_collapse)))
# Cria coluna de texto para JSONL
clientes_text <- clientes_flat %>%
mutate(text = pmap_chr(., function(...) {
paste(paste(names(.) , ":", c(...)), collapse = " | ")
}))
# Salva JSONL
jsonl_file <- "clientes.jsonl"
con <- file(jsonl_file, open = "w", encoding = "UTF-8")
for (line in clientes_text$text) {
writeLines(toJSON(list(text = line), auto_unbox = TRUE), con)
}
close(con)
cat("Arquivo JSONL salvo em:", jsonl_file, "\n")
library(dplyr)
library(purrr)
library(jsonlite)
# Função para colapsar listas em string de forma segura
recursive_collapse <- function(x) {
if (is.null(x) || length(x) == 0) return("")
if (is.list(x)) x <- map_chr(x, recursive_collapse)
paste(unlist(x), collapse = " | ")
}
# Converte listas em strings
clientes_flat <- clientes_expandidos %>%
mutate(across(where(is.list), ~ map_chr(., recursive_collapse)))
# Cria texto semântico para cada cliente
clientes_text <- clientes_flat %>%
mutate(text = pmap_chr(., function(...) {
fields <- c(...)
names_fields <- names(.)
# Combina nomes + valores em frase natural
frase <- paste(names_fields, fields, sep=": ", collapse=", ")
# Prefixo de contexto
paste0("Ficha do cliente: ", frase)
}))
# Salva em JSONL
jsonl_file <- "clientes_semantico.jsonl"
con <- file(jsonl_file, open = "w", encoding = "UTF-8")
for (line in clientes_text$text) {
writeLines(toJSON(list(text = line), auto_unbox = TRUE), con)
}
close(con)
cat("Arquivo JSONL semântico salvo em:", jsonl_file, "\n")
View(clientes_expandidos)
View(clientes)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(dados_formatados)
View(dados)
source("~/.active-rstudio-document", echo=TRUE)
View(dados_wide)
View(dados_wide)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(readxl)
library(dplyr)
library(purrr)
library(stringr)
library(tidyr)
library(googlesheets4)
# Caminho da pasta
pasta <- "C:/Users/pedro/OneDrive/Área de Trabalho/pasta_parcelas"
# Lista de arquivos Excel
arquivos <- list.files(pasta, pattern = "\\.xlsx$", full.names = TRUE)
# Função pra ler um arquivo garantindo que todas as colunas importantes sejam character
ler_excel <- function(arquivo) {
read_excel(arquivo, col_types = "text")
}
# Lê todos os arquivos
dados <- map_dfr(arquivos, ler_excel) %>%
distinct()  # remove duplicatas
# Filtra apenas cobranças parceladas
dados_parceladas <- dados %>%
filter(`Tipo de cobrança` == "Cobrança Parcelada")
# Extrai nome do parcelamento, número da parcela e valor da parcela 1
dados_formatados <- dados_parceladas %>%
mutate(
NumeroParcela = str_extract(Descrição, "(?<=Parcela )\\d+(?= de)"),
NumeroParcela = ifelse(is.na(NumeroParcela), "Unica", NumeroParcela),
NomeParcelamento = str_replace(Descrição, "^Parcela \\d+ de \\d+\\.\\s*", ""),  # remove "Parcela X de Y. "
NomeParcelamento = str_replace(NomeParcelamento, "^\\.\\s*", ""),  # remove . do começo
Cliente = Nome,
StatusParcela = Situação
) %>%
select(Cliente, `CPF ou CNPJ`, NomeParcelamento, NumeroParcela, StatusParcela, Valor)
# Pega o valor da parcela 1 de cada parcelamento
valores_parcela1 <- dados_formatados %>%
filter(NumeroParcela == "1") %>%
select(Cliente, `CPF ou CNPJ`, NomeParcelamento, ValorParcela1 = Valor)
# Pivot: uma linha por cliente + parcelamento
dados_wide <- dados_formatados %>%
pivot_wider(
id_cols = c(Cliente, NomeParcelamento),
names_from = NumeroParcela,
values_from = StatusParcela,
names_prefix = "Parcela"
) %>%
left_join(valores_parcela1, by = c("Cliente", "NomeParcelamento"))
# Ordena colunas de parcelas
col_parcelas <- grep("^Parcela", names(dados_wide), value = TRUE)
parcelas_ordenadas <- col_parcelas[order(as.numeric(str_remove(col_parcelas, "Parcela")))]  # crescente
# parcelas_ordenadas <- col_parcelas[order(as.numeric(str_remove(col_parcelas, "Parcela")), decreasing = TRUE)]  # decrescente
dados_wide <- dados_wide %>%
select(Cliente, NomeParcelamento, ValorParcela1, all_of(parcelas_ordenadas)) %>%
arrange(Cliente, NomeParcelamento)
View(dados_wide)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(valores_parcela1)
View(dados)
library(readxl)
library(dplyr)
library(purrr)
library(stringr)
library(tidyr)
library(googlesheets4)
# Caminho da pasta
pasta <- "C:/Users/pedro/OneDrive/Área de Trabalho/pasta_parcelas"
# Lista de arquivos Excel
arquivos <- list.files(pasta, pattern = "\\.xlsx$", full.names = TRUE)
# Função para ler Excel garantindo que todas as colunas importantes sejam character
ler_excel <- function(arquivo) {
read_excel(arquivo, col_types = "text")
}
# Lê todos os arquivos e remove duplicatas
dados <- map_dfr(arquivos, ler_excel) %>%
distinct()
# Filtra apenas cobranças parceladas
dados_parceladas <- dados %>%
filter(`Tipo de cobrança` == "Cobrança Parcelada")
# Extrai número da parcela, valor e limpa nome do parcelamento
dados_formatados <- dados_parceladas %>%
mutate(
NumeroParcela = str_extract(Descrição, "(?<=Parcela )\\d+(?= de)"),
NumeroParcela = ifelse(is.na(NumeroParcela), "Unica", NumeroParcela),
# Limpeza do nome do parcelamento
NomeParcelamento = str_replace(Descrição, "^Parcela \\d+ de \\d+\\.\\s*", ""), # remove "Parcela X de Y. "
NomeParcelamento = str_replace(NomeParcelamento, "^\\.+\\s*", ""),              # remove pontos no começo
NomeParcelamento = str_replace(NomeParcelamento, "\\.+$", ""),                  # remove pontos no fim
NomeParcelamento = str_squish(NomeParcelamento),                                 # remove espaços extras e quebras de linha
Cliente = Nome,
StatusParcela = Situação
) %>%
select(Cliente, `CPF ou CNPJ`, NomeParcelamento, NumeroParcela, StatusParcela, Valor)
# Pega o valor da parcela 1 de cada parcelamento
valores_parcela1 <- dados_formatados %>%
filter(NumeroParcela == "1") %>%
select(Cliente, `CPF ou CNPJ`, NomeParcelamento, ValorParcela1 = Valor)
View(dados_formatados)
library(readxl)
library(dplyr)
library(purrr)
library(stringr)
library(tidyr)
library(googlesheets4)
# Caminho da pasta
pasta <- "C:/Users/pedro/OneDrive/Área de Trabalho/pasta_parcelas"
# Lista de arquivos Excel
arquivos <- list.files(pasta, pattern = "\\.xlsx$", full.names = TRUE)
# Função para ler Excel garantindo que todas as colunas importantes sejam character
ler_excel <- function(arquivo) {
read_excel(arquivo, col_types = "text")
}
# Lê todos os arquivos e remove duplicatas
dados <- map_dfr(arquivos, ler_excel) %>%
distinct()
# Filtra apenas cobranças parceladas
dados_parceladas <- dados %>%
filter(`Tipo de cobrança` == "Cobrança Parcelada")
# Extrai número da parcela, valor e limpa nome do parcelamento
dados_formatados <- dados_parceladas %>%
mutate(
NumeroParcela = str_extract(Descrição, "(?<=Parcela )\\d+(?= de)"),
NumeroParcela = as.numeric(ifelse(is.na(NumeroParcela), "Unica", NumeroParcela)),
# Limpeza do nome do parcelamento
NomeParcelamento = str_replace(Descrição, "^Parcela \\d+ de \\d+\\.\\s*", ""), # remove "Parcela X de Y. "
NomeParcelamento = str_replace(NomeParcelamento, "^\\.+\\s*", ""),              # remove pontos no começo
NomeParcelamento = str_replace(NomeParcelamento, "\\.+$", ""),                  # remove pontos no fim
NomeParcelamento = str_squish(NomeParcelamento),                                 # remove espaços extras e quebras de linha
Cliente = Nome,
StatusParcela = Situação
) %>%
select(Cliente, `CPF ou CNPJ`, NomeParcelamento, NumeroParcela, StatusParcela, Valor)
# Pega o valor da parcela 1 de cada parcelamento
valores_parcela1 <- dados_formatados %>%
filter(NumeroParcela == "1") %>%
select(Cliente, `CPF ou CNPJ`, NomeParcelamento, ValorParcela1 = Valor)
# Pivot: uma linha por cliente + parcelamento
dados_wide <- dados_formatados %>%
pivot_wider(
id_cols = c(Cliente, NomeParcelamento),
names_from = NumeroParcela,
values_from = StatusParcela,
names_prefix = "Parcela"
) %>%
left_join(valores_parcela1, by = c("Cliente", "NomeParcelamento"))
# Ordena colunas de parcelas crescentemente
col_parcelas <- grep("^Parcela", names(dados_wide), value = TRUE)
parcelas_ordenadas <- col_parcelas[order(as.numeric(str_remove(col_parcelas, "Parcela")))]
# Organiza colunas finais
dados_wide <- dados_wide %>%
select(Cliente, NomeParcelamento, ValorParcela1, all_of(parcelas_ordenadas)) %>%
arrange(Cliente, NomeParcelamento)
View(dados_wide)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(dados_formatados)
View(dados_wide)
View(dados_wide)
View(dados_wide)
source("~/.active-rstudio-document", echo=TRUE)
View(dados_wide)
source("~/.active-rstudio-document", echo=TRUE)
View(dados_wide)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(get_full_clientes)
get_full_clients$content
get_full_clientes$content
View(get_full_clientes)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
get_full_clientes$res
View(get_full_clientes)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
View(clientes_df)
clientes_df <- clientes_df %>% select(-starts_with("FinancialInfo"))
View(clientes_df)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
View(clientes_df[[21]][[4]])
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(get_full_clientes)
View(res_list)
View(res)
View(clientes_df)
View(clientes_df[[21]][[1]])
View(clientes_df[[26]][[2]])
View(clientes_df[[26]][[6]])
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
xove <-clientes_df$ClientAddress
View(xove)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
# Transformar a parte que contém os clientes em data.frame
clientes_df <- as_tibble(res_list$clients)
# Visualizar as primeiras linhas
head(clientes_df)
clientes_df <- clientes_df %>%
select(-starts_with("FinancialInfo")) %>%
select(1:13) %>%
unnest(Case, names_sep = "_") %>%
unnest(ClientAddress,names_sep = "_") %>%
unnest(FinancingInfo, names_sep = "_") %>%
mutate(across(where(is.character), str_squish))
View(clientes_df)
clientes_df <- as_tibble(res_list$clients)
clientes_df <- clientes_df %>%
select(-starts_with("FinancialInfo")) %>%
select(1:13) %>%
unnest(Case, names_sep = "_") %>%
unnest(ClientAddress,names_sep = "_") %>%
unnest(FinancingInfo, names_sep = "_") %>%
mutate(across(where(is.character), str_squish))
# Transformar a parte que contém os clientes em data.frame
clientes_df <- as_tibble(res_list$clients)
# Visualizar as primeiras linhas
head(clientes_df)
clientes_df <- clientes_df %>%
select(-starts_with("FinancialInfo")) %>%
select(1:13) %>%
unnest(Case, names_sep = "_case") %>%
unnest(ClientAddress,names_sep = "_address") %>%
unnest(FinancingInfo, names_sep = "_FinancingInfo") %>%
mutate(across(where(is.character), str_squish))
clientes_df <- as_tibble(res_list$clients)
# Visualizar as primeiras linhas
head(clientes_df)
clientes_df <- clientes_df %>%
select(-starts_with("FinancialInfo")) %>%
select(1:13) %>%
unnest(Case, names_sep = "_case") %>%
unnest(ClientAddress,names_sep = "_address") %>%
unnest(FinancingInfo, names_sep = "_FinancingInfo") %>%
mutate(across(where(is.character), str_squish))
# Transformar a parte que contém os clientes em data.frame
clientes_df <- as_tibble(res_list$clients)
# Visualizar as primeiras linhas
head(clientes_df)
clientes_df <- clientes_df %>%
select(-starts_with("FinancialInfo")) %>%
select(1:13) %>%
unnest_longer(Case, names_sep = "_case") %>%
unnest_longer(ClientAddress,names_sep = "_address") %>%
unnest_longer(FinancingInfo, names_sep = "_FinancingInfo") %>%
mutate(across(where(is.character), str_squish))
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
colnames(clientes_df)
clientes_df <- clientes_df %>% select(-profile_pic, -Case_clientId, -ClientAddress_id,
-FinancingInfo_id, -FinancingInfo_clientId, -FinancingInfo_caseId)
clientes_df$Case_DealInfo
clientes_df$Case_FinancingInfo
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(clientes_df)
install.packages("RSQLite")
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
con <- dbConnect(SQLite(), "clientes_database.sqlite")
dbWriteTable(con, "clientes", clientes_df, overwrite = TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
getwd()
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
View(con)
View(clientes_df)
colnames(clientes_df)
View(clientes_df)
View(clientes_df)
source("C:/Users/pedro/OneDrive/Área de Trabalho/dasdasdas.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
